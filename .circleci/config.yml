# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:

  # build the app in the cloud and deploy it onto the dedicated backends
  build:
    docker:
      - image: circleci/node:12.14.1
    environment:
      HOST: ssh-840600-pftp2014@jetzt-die-welt-retten.de
      PROJ_DIR: /kunden/188089_20457/pftp2014/source
      ENV_VARS: ./env_vars.sh
    working_directory: ~/ttc-app
    steps:
      - checkout
      - run: echo "$CIRCLE_BRANCH"
      - run:
          name: Setting Environment Variables
          command: |
            > $ENV_VARS
            if [[ "${CIRCLE_BRANCH}" == "master" ]]
            then
              echo 'export WD_SYMFONY="$PROJ_DIR/ttc2018_prod"' >>  $ENV_VARS
              echo 'export SERVER_URL="www.trilliontreecampaign.org"' >>  $ENV_VARS
            elif [[ "${CIRCLE_BRANCH}" == "develop" ]]
            then
              echo 'export WD_SYMFONY="$PROJ_DIR/ttc2018_development"' >>  $ENV_VARS
              echo 'export SERVER_URL="development.trilliontreecampaign.org"' >>  $ENV_VARS
            elif [[ "${CIRCLE_BRANCH}" == "staging" ]] || [[ "${CIRCLE_BRANCH}" == "test" ]]
            then
              echo 'export WD_SYMFONY="$PROJ_DIR/ttc2018_${CIRCLE_BRANCH}"' >>  $ENV_VARS
              echo 'export SERVER_URL="${CIRCLE_BRANCH}.trilliontreecampaign.org"' >>  $ENV_VARS
            else
              # 'devel' tagged version
              echo 'export WD_SYMFONY="$PROJ_DIR/ttc2018_devel"' >>  $ENV_VARS
              echo 'export SERVER_URL="devel.trilliontreecampaign.org"' >>  $ENV_VARS
            fi
            cat $ENV_VARS
      - run:
          name: Install packages
          command: |
            sudo apt-get update && sudo apt-get install -y gettext-base
      # ID_RSA has been set up in project settings as base64 encoded content of 'id_rsa' file
      # https://circleci.com/gh/Plant-for-the-Planet-org/treecounter-platform/edit#env-vars
      - run:
          name: Setup SSH to Domain Factory
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan jetzt-die-welt-retten.de 2>/dev/null >> ~/.ssh/known_hosts
            (umask 077; touch ~/.ssh/id_rsa; chmod 0600 ~/.ssh/id_rsa)
            echo $ID_RSA | base64 -d > ~/.ssh/id_rsa
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install npm
          command: npm install
      - run:
          name: Setup local configuration
          command: |
            source $ENV_VARS
            export host=$SERVER_URL
            export api_url=$scheme://$host
            if [[ "${CIRCLE_BRANCH}" == "master" ]]
            then
              export debug=
            else
              export debug=true
            fi
            envsubst < .env.deploy > .env.production
      - run:
          name: Build web client
          command: |
            source $ENV_VARS
            echo $WD_SYMFONY
            if [[ "${CIRCLE_BRANCH}" == "master" ]]
            then
              npm run build:prod_server
            else
              npm run build:server
            fi
            echo "Copying new files to web server"
            if [[ "${CIRCLE_BRANCH}" == "staging" ]] || [[ "${CIRCLE_BRANCH}" == "develop" ]]
            then
              ssh $HOST "cd $WD_SYMFONY; rm -fr web/*"
            else
              ssh $HOST "cd $WD_SYMFONY; git clean -f web"
            fi
            scp -r web/server/* $HOST:$WD_SYMFONY/web/.
            scp -r .well-known $HOST:$WD_SYMFONY/web/.
            # copy client .htaccess into web folder
            scp -r .htaccess $HOST:$WD_SYMFONY/web/.
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  # only update the repository on the server to support our Dashboard
  build_server_repository:
    docker:
      - image: alpine

    environment:
      HOST: ssh-840600-pftp2014@jetzt-die-welt-retten.de
      PROJ_DIR: /kunden/188089_20457/pftp2014/source
      ENV_VARS: ./env_vars.sh

    working_directory: ~/ttc-app

    steps:
      - run: echo "$CIRCLE_BRANCH"
      - run:
          name: Setting Environment Variables
          command: |
            > $ENV_VARS
            if [[ "${CIRCLE_BRANCH}" == "master" ]]
            then
              echo 'export WD_REACT="$PROJ_DIR/ttc-app_prod"' >>  $ENV_VARS
              echo 'export SERVER_URL="www.trilliontreecampaign.org"' >>  $ENV_VARS
            elif [[ "${CIRCLE_BRANCH}" == "staging" ]] || [[ "${CIRCLE_BRANCH}" == "test" ]]
            then
              echo 'export WD_REACT="$PROJ_DIR/ttc-app_${CIRCLE_BRANCH}"' >>  $ENV_VARS
              echo 'export SERVER_URL="${CIRCLE_BRANCH}.trilliontreecampaign.org"' >>  $ENV_VARS
            else
              # 'devel' tagged version
              echo 'export WD_REACT="$PROJ_DIR/ttc-app_devel"' >>  $ENV_VARS
              echo 'export SERVER_URL="devel.trilliontreecampaign.org"' >>  $ENV_VARS
            fi
            cat $ENV_VARS
      # add SSH support
      - run:
          name: Install packages
          command: |
            apk update && apk add openssh gettext
      # ID_RSA has been set up in project settings as base64 encoded content of 'id_rsa' file
      # https://circleci.com/gh/Plant-for-the-Planet-org/treecounter-platform/edit#env-vars
      - run:
          name: Setup SSH to Domain Factory
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan jetzt-die-welt-retten.de 2>/dev/null >> ~/.ssh/known_hosts
            (umask 077; touch ~/.ssh/id_rsa; chmod 0600 ~/.ssh/id_rsa)
            echo $ID_RSA | base64 -d > ~/.ssh/id_rsa
      - run:
          name: Checkout web client
          command: |
            source $ENV_VARS
            echo $WD_REACT
            ssh $HOST "cd $WD_REACT; git fetch origin --prune && git fetch origin --tags"
            if [[ "${CIRCLE_BRANCH}" ]]
            then
              ssh $HOST "cd $WD_REACT; git checkout ${CIRCLE_BRANCH}"
              ssh $HOST "cd $WD_REACT; git pull"
            else
              # 'devel' tagged version
              ssh $HOST "cd $WD_REACT; git checkout devel"
              ssh $HOST "cd $WD_REACT; git merge devel"
            fi
      - run:
          name: Setup local configuration
          command: |
            source $ENV_VARS
            export host=$SERVER_URL
            if [[ "${CIRCLE_BRANCH}" == "master" ]]
            then
              export debug=
            else
              export debug=true
            fi
            ssh $HOST "cd $WD_REACT; envsubst < .env.deploy > .env.production"

      # - run:
      #     name: Build web client
      #     command: |
      #       source $ENV_VARS
      #       echo $WD_REACT
      #       ssh $HOST "cd $WD_REACT; /usr/bin/npm install"
      #       if [[ "${CIRCLE_BRANCH}" == "master" ]]
      #       then
      #         ssh $HOST "cd $WD_REACT; /usr/bin/npm run build:prod_server"
      #       else
      #         ssh $HOST "cd $WD_REACT; /usr/bin/npm run build:server"
      #       fi

  # build the app in the cloud to check for eslint or compilation errors
  build_gitflow:
    docker:
      - image: circleci/node:12.14.1
    working_directory: ~/ttc-app
    steps:
      - checkout
      - run:
          name: Install packages
          command: |
            sudo apt-get update && sudo apt-get install -y gettext-base
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: Install react-native CLI
          command: 'sudo npm install -g react-native-cli'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Linting
          command: npm run lint:errors
      - run:
          name: Setup local configuration
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]
            then
              export debug=
              envsubst < .env.deploy > .env.production
            else
              export debug=true
              envsubst < .env.deploy > .env.develop
            fi
      - run:
          name: Build web client
          command: mkdir -p ./web/server && npm run build:server
      - run:
          name: Build Android app
          command: |
            react-native bundle \
                --platform android \
                --dev false \
                --entry-file index.js \
                --bundle-output android-release.bundle \
                --sourcemap-output android-release.bundle.map
      - run:
          name: Build iOS app
          command: |
            react-native bundle \
                --platform ios \
                --dev false \
                --entry-file index.js \
                --bundle-output ios-release.bundle \
                --sourcemap-output ios-release.bundle.map

workflows:
  version: 2
  tagged-build:
    jobs:
      - build:
          filters:
            branches:
              only:
                - develop
                - master
                - test
                - staging
            tags:
              only: /^devel/
      - build_server_repository:
          filters:
            branches:
              only:
                - master
                - test
                - staging
            tags:
              only: /^devel/
      - build_gitflow:
          filters:
            branches:
              only:
                - /^feature\/.*/
                - /^hotfix\/.*/
                - /^release\/.*/
